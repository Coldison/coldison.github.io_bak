<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>WSL安装及用miniconda创建python3.7环境</title>
    <link href="/2021/02/07/WSL%E5%AE%89%E8%A3%85%E5%8F%8A%E7%94%A8miniconda%E5%88%9B%E5%BB%BApython3-7%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/02/07/WSL%E5%AE%89%E8%A3%85%E5%8F%8A%E7%94%A8miniconda%E5%88%9B%E5%BB%BApython3-7%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>WSL在windows上的确相当的鸡肋，但是假若没有配置服务器，WSL配合VSCode，也可以充当生产力工具。比较大的bug是，WSL的文件与NTFS的文件系统并不同步，可能是创建了多个缓存，因此需要不断地Reload来更新。如果有服务器资源或者Linux桌面版，那么配合VSCode远程开发工具就已经很香了。以下是WSL的安装教程。</p><h3 id="1-WSL准备"><a href="#1-WSL准备" class="headerlink" title="1. WSL准备"></a>1. WSL准备</h3><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/104060131">vscode wsl入门 - tnnmigga的文章 - 知乎</a></p><ul><li><p>首先要在windows打开linux子系统功能<br>控制面板——程序——启用或关闭windows功能——适用于linux的windows子系统</p></li><li><p>然后重启电脑</p></li><li><p>打开win10应用商店，搜索Ubuntu</p></li><li><p>下载安装好后启动，可以看到Ubuntu bash， 几分钟后初始化完成（这里没有提示，几分钟后按Enter键）即可。输入用户名: dison （不能有大写字母，这里dison用于用户指代，可以输自己的名字）及密码。</p></li><li><p><u>如果不喜欢用Ubuntu自带的bash的话可以使用Pycharm或者vscode的terminal，方便代码的复制粘贴。直接在terminal中输入wsl或者Ubuntu就可以打开Ubuntu子系统</u></p></li><li><p>换源</p><ul><li><p>获取权限 </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo chown -R dison /etc/apt/sources.list<br></code></pre></div></td></tr></table></figure></li><li><p>备份原文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak<br></code></pre></div></td></tr></table></figure></li><li><p>编辑源</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo vim /etc/apt/sources.list<br></code></pre></div></td></tr></table></figure><p>打开sources.list后按i键进入insert模式，将原来的源都用#注释掉。（如果会使用vim编辑器可以使用其他的快捷键）</p><p>复制下面的源：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><br><span class="hljs-comment"># 预发布软件源，不建议启用</span><br><span class="hljs-comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br></code></pre></div></td></tr></table></figure><p>光标移到最下方右键单击粘贴源。</p></li></ul><p>按Esc键退出编辑模式，依次输入 :wq保存更改。</p><ul><li>更新源文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt update<br></code></pre></div></td></tr></table></figure><h3 id="2-安装miniconda"><a href="#2-安装miniconda" class="headerlink" title="2. 安装miniconda"></a>2. 安装miniconda</h3></li></ul><p>参考文章：<a href="https://blog.csdn.net/weixin_30486037/article/details/97982277">在Ubuntu上安装Miniconda</a></p><ul><li><p>下载并安装</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install wget<br>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<br>bash Miniconda3-latest-Linux-x86_64.sh<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 一直按回车然后输入yes</span><br>please answer <span class="hljs-string">&#x27;yes&#x27;</span> or <span class="hljs-string">&#x27;no&#x27;</span>:<br>&gt;&gt;&gt; yes<br><br><span class="hljs-comment"># 选择安装路径, 文件名前加点号表示隐藏文件</span><br>Miniconda3 will now be installed into this location:<br>&gt;&gt;&gt; ~/.miniconda3<br> <br><span class="hljs-comment"># 添加配置信息到 ~/.bashrc文件</span><br>Do you wish the installer to initialize Miniconda3 by running conda init? [yes|no]<br>[no] &gt;&gt;&gt; yes<br></code></pre></div></td></tr></table></figure></li><li><p>运行配置信息文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></div></td></tr></table></figure></li><li><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">conda --version<br></code></pre></div></td></tr></table></figure><h3 id="3-python3-7及相关包安装"><a href="#3-python3-7及相关包安装" class="headerlink" title="3. python3.7及相关包安装"></a>3. python3.7及相关包安装</h3></li><li><p>如果已经进入了base环境可以用如下命令退出环境</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">conda deactivate<br></code></pre></div></td></tr></table></figure></li><li><p>创建python3.7环境</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">conda create -n venv python=3.7<br></code></pre></div></td></tr></table></figure></li><li><p>激活虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">conda activate venv<br></code></pre></div></td></tr></table></figure></li><li><p>安装相关包</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">conda install pandas<br>conda install pika<br>conda install pymysql<br>conda install xlrd=1.2.0<br>conda install matplotlib<br>conda install openpyxl<br>conda install pytorch torchvision torchaudio cudatoolkit=10.2 -c pytorch<br></code></pre></div></td></tr></table></figure><h3 id="4-运行说明"><a href="#4-运行说明" class="headerlink" title="4.运行说明"></a>4.运行说明</h3></li><li><p>路径说明</p><p>WSL能够运行Windows系统中的文件，需要在路径前加上/mnt，比如切换到D盘即为         </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /mnt/d<br></code></pre></div></td></tr></table></figure></li><li><p>由于.so文件使用了python3.7编译，因此在运行程序前先激活python3.7环境，然后再运行相关脚本</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">conda <span class="hljs-built_in">activate</span> venv<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程，Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WSL</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>勃学：成功人士的最后一次失败</title>
    <link href="/2021/02/07/%E5%8B%83%E5%AD%A6%EF%BC%9A%E6%88%90%E5%8A%9F%E4%BA%BA%E5%A3%AB%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5/"/>
    <url>/2021/02/07/%E5%8B%83%E5%AD%A6%EF%BC%9A%E6%88%90%E5%8A%9F%E4%BA%BA%E5%A3%AB%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<p>在去年三月我曾经对勃学发表了一番小小的意见，虽然无甚价值，但是修复了博客，重新上传一下：</p><blockquote><p>尽管勃学在知乎已经消退很久了，但是一直关注着这个小小的亚文化。在批判前首先要说明的是，作为一种亚文化，勃学的什么吸引着我们？毫无疑问，失败是勃学的核心。浅色床单，浙江大学，或者没有去牛组，或者最后做CS，在勃学语境中，被赋予失败的涵义。与之相对，去清北，去北美top10，去牛组，去大公司，做出fancy的成果，拿到相应的回报，便是勃学语境下的成功。他们本以为是唾手可得的，早就设想好的，却在咫尺之间分道扬镳，因为某一个选择，因为现实条件，客观因素，人生进入了“失败组”，并且就此断定，失败是永恒的，成功不过是那些有着更好家世背景，social network，或者八面玲珑，收割韭菜的产物。</p><p>不论如何定义成功和失败，失败是永恒的这个论断，首先是残酷现实的。正因为如此，当年轻人遭遇到了第一次失败的时候，会欣然投入勃学的怀抱——我也有错，但是世界当然也有错。承认并且拥抱失败，这是勃学给我们的积极暗示，是勃学的元命题。这个结论，堪比加缪的荒谬哲学。就像荒谬哲学只能进入意识到世界荒谬本质的人的脑海中一样，勃学对于失败者的迎合，是这个亚文化得以不断生长的原动力。</p><p>但是仅此而已，或许是缺乏社交媒体的传播，使得勃学在本质上变成了某种私密的价值观。除了失败是永恒的这一论断以外，勃学的其他阐述都仅仅依赖于勃学家们个人的生命体验。比如，在湾区当码农，年入百万，对勃学家们是失败，但是对绝大多数人来说当然是成功了。而在勃学家们的言谈举止中他们其实也不讳言这一点，他们已经得到了世俗意义的成功。比如立党会去假扮美国底层，但是他也会神气十足地说他在休斯敦最好的区。“我得到了很多，但是我失去的更多。”这大概是他们的失败逻辑。诡辩当然是可以的，毕竟这是他们真实的经历，他们的朋友同事同学都成功了，而他们则失败了。但是正因为这些经验本身，注定了勃学和勃学家们是缺乏关怀的。当曾勃自嘲三本的时候，绝对不会把三本放在眼里，同样，立党和美国底层也相去甚远。他们假扮着骑士，来揭穿欺骗韭菜的幌子，来传布勃学的真谛，但是这并不意味着他们关怀韭菜。梁山泊的好汉们要替天行道，但是杀起人来不也毫不手软嘛。缺乏关怀本身是勃学的致命弱点，这既是勃学无法被更多人接纳的原因，也是勃学家们自相矛盾的所在。明明为世界上最大的镰刀工厂服务，却鄙视起别的镰刀来。</p><p>勃学的第二个弱点在于解方，表面上勃学的终极结论是“自杀”，但是实际上勃学家个个都学着杨朱的法子，贵己重生。</p></blockquote><p>一年已经过去了，在这一年里很多都已经改变，包括勃学本身。事实上我也是最近才认识到，勃学早就已经死了，徐白左江，信徒不过是江湖故事，曾博也退化成互联网上的一只猫。我也不过在评论一堆废墟罢了。但是相比于一年以前，我已经不再讨厌他了。恰恰相反，我看到了一种坦诚。人不能欺骗别人，但首先不能欺骗自己。大众媒体侵蚀我们的生活，左右我们思想的时候，可能只有依靠这样的方法论，我们才能够真正接触到现实世界。浅色床单上的眼泪是真的，尽管也许故作姿态，但是我们也不能否认这一点。</p>]]></content>
    
    
    <categories>
      
      <category>评论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>勃学</tag>
      
      <tag>失败</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo的安装及使用</title>
    <link href="/2021/02/07/Hexo%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/02/07/Hexo%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍一下Hexo的安装与使用流程，以免自己忘记。</p><a id="more"></a><h3 id="一、Hexo的安装"><a href="#一、Hexo的安装" class="headerlink" title="一、Hexo的安装"></a>一、Hexo的安装</h3><h4 id="1-Hexo的安装"><a href="#1-Hexo的安装" class="headerlink" title="1. Hexo的安装"></a>1. Hexo的安装</h4><p>需要先安装nodejs以及git。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></div></td></tr></table></figure><h4 id="2-Hexo的初始化"><a href="#2-Hexo的初始化" class="headerlink" title="2. Hexo的初始化"></a>2. Hexo的初始化</h4><p>Hexo安装完成后，在指定文件夹下初始化。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br><span class="hljs-built_in">cd</span> &lt;folder&gt;<br>npm install<br></code></pre></div></td></tr></table></figure><p>_config.yml下有网站的配置信息，可以在此配置大部分参数。具体配置及相关文档参见：<a href="https://hexo.io/zh-cn/docs/">Hexo文档</a></p><p>在github上创建名为<code>username.github.io</code>的仓库，在_config.yml文件的deploy部分配置自己的git仓库地址，将分支改为master。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/Coldison/coldison.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><h3 id="二、Fluid主题配置"><a href="#二、Fluid主题配置" class="headerlink" title="二、Fluid主题配置"></a>二、Fluid主题配置</h3><p>我选择的是fluid主题，参见<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">Fluid 主题文档</a>。</p><p>将Fluid主题文件解压，放到themes目录下并且改名fluid。在<code>_config.yml</code>中将theme改为fluid。然后将fluid文件夹下的 <code>_config.yml</code>改名为<code>_config.fluid.yml</code>，复制到<code>_config.yml</code>同级文件夹。然后就可以在<code>_config.fluid.yml</code>修改相应的style了。</p><p>主要是修改配色，链接以及文本。我选择了偏灰的颜色，超链接是紫色系，具体可以自己修改。</p><h3 id="三、Hexo命令"><a href="#三、Hexo命令" class="headerlink" title="三、Hexo命令"></a>三、Hexo命令</h3><p>写作：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></div></td></tr></table></figure><p>主要有post，page，draft三种，路径都是source。</p><p>也可以自己创建模板。</p><p>常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo g <span class="hljs-comment">#完整命令为hexo generate,用于生成静态文件</span><br>hexo s <span class="hljs-comment">#完整命令为hexo server,用于启动服务器，主要用来本地预览</span><br>hexo d <span class="hljs-comment">#完整命令为hexo deploy,用于将本地文件发布到github上</span><br>hexo n <span class="hljs-comment">#完整命令为hexo new,用于新建一篇文章</span><br>hexo g -d <span class="hljs-comment">#两个命令的合成，一般在修改或者添加博文后直接使用这个命令</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<ul><li>物理肄业，爱好者。</li><li>文艺自行车，曾经可以双手脱把。</li><li>盯鞋音乐，China Indie。</li><li>shit-code factory。</li><li>台海直通车。</li></ul>]]></content>
    
  </entry>
  
  
  
</search>
